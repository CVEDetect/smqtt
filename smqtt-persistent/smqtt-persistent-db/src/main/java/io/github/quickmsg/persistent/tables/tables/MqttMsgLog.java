/*
 * This file is generated by jOOQ.
 */
package io.github.quickmsg.persistent.tables.tables;


import io.github.quickmsg.persistent.tables.Smqtt;
import io.github.quickmsg.persistent.tables.tables.records.MqttMsgLogRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MqttMsgLog extends TableImpl<MqttMsgLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>smqtt.mqtt_msg_log</code>
     */
    public static final MqttMsgLog MQTT_MSG_LOG = new MqttMsgLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MqttMsgLogRecord> getRecordType() {
        return MqttMsgLogRecord.class;
    }

    /**
     * The column <code>smqtt.mqtt_msg_log.message_id</code>. 消息ID
     */
    public final TableField<MqttMsgLogRecord, String> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "消息ID");

    /**
     * The column <code>smqtt.mqtt_msg_log.clientId</code>. 客户端ID
     */
    public final TableField<MqttMsgLogRecord, String> CLIENTID = createField(DSL.name("clientId"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "客户端ID");

    /**
     * The column <code>smqtt.mqtt_msg_log.topic</code>. 话题
     */
    public final TableField<MqttMsgLogRecord, String> TOPIC = createField(DSL.name("topic"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "话题");

    /**
     * The column <code>smqtt.mqtt_msg_log.qos</code>. 消息质量
     */
    public final TableField<MqttMsgLogRecord, Integer> QOS = createField(DSL.name("qos"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "消息质量");

    /**
     * The column <code>smqtt.mqtt_msg_log.retain</code>. 保留标志
     */
    public final TableField<MqttMsgLogRecord, Integer> RETAIN = createField(DSL.name("retain"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "保留标志");

    /**
     * The column <code>smqtt.mqtt_msg_log.payload</code>. 消息内容
     */
    public final TableField<MqttMsgLogRecord, String> PAYLOAD = createField(DSL.name("payload"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "消息内容");

    /**
     * The column <code>smqtt.mqtt_msg_log.create_time</code>. 记录保存时间
     */
    public final TableField<MqttMsgLogRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATETIME)), this, "记录保存时间");

    private MqttMsgLog(Name alias, Table<MqttMsgLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private MqttMsgLog(Name alias, Table<MqttMsgLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>smqtt.mqtt_msg_log</code> table reference
     */
    public MqttMsgLog(String alias) {
        this(DSL.name(alias), MQTT_MSG_LOG);
    }

    /**
     * Create an aliased <code>smqtt.mqtt_msg_log</code> table reference
     */
    public MqttMsgLog(Name alias) {
        this(alias, MQTT_MSG_LOG);
    }

    /**
     * Create a <code>smqtt.mqtt_msg_log</code> table reference
     */
    public MqttMsgLog() {
        this(DSL.name("mqtt_msg_log"), null);
    }

    public <O extends Record> MqttMsgLog(Table<O> child, ForeignKey<O, MqttMsgLogRecord> key) {
        super(child, key, MQTT_MSG_LOG);
    }

    @Override
    public Schema getSchema() {
        return Smqtt.SMQTT;
    }

    @Override
    public MqttMsgLog as(String alias) {
        return new MqttMsgLog(DSL.name(alias), this);
    }

    @Override
    public MqttMsgLog as(Name alias) {
        return new MqttMsgLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MqttMsgLog rename(String name) {
        return new MqttMsgLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MqttMsgLog rename(Name name) {
        return new MqttMsgLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, Integer, Integer, String, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
